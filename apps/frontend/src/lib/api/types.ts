/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/workflows/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Resume Workflow */
        post: operations["start_resume_workflow_workflows_resume_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Resume State */
        get: operations["get_resume_state_workflows__workflow_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Human Approval */
        post: operations["submit_human_approval_workflows__workflow_id__approval_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Workflow Result */
        get: operations["get_workflow_result_workflows__workflow_id__result_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ApprovalRequest */
        ApprovalRequest: {
            /** Approved */
            approved: boolean;
            /** Notes */
            notes?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthResponse */
        HealthResponse: {
            /**
             * Status
             * @default ok
             */
            status: string;
        };
        /**
         * ResumeMessage
         * @description Normalized chat message stored inside the workflow state.
         */
        ResumeMessage: {
            /**
             * Role
             * @enum {string}
             */
            role: "human" | "assistant" | "system";
            /** Content */
            content: string;
            /** Model */
            model?: string | null;
        };
        /**
         * ResumeWorkflowState
         * @description Serializable workflow state tracked across Temporal executions.
         */
        ResumeWorkflowState: {
            /**
             * Task
             * @enum {string}
             */
            task: "ingest" | "draft" | "revise" | "resume_pipeline" | "compliance_only" | "publish";
            /**
             * Stage
             * @default route
             * @enum {string}
             */
            stage: "route" | "ingestion" | "drafting" | "critique" | "revision" | "compliance" | "publishing" | "done";
            /**
             * Status
             * @default pending
             * @enum {string}
             */
            status: "pending" | "in_progress" | "complete" | "error";
            /** Request Id */
            request_id: string;
            /** Messages */
            messages?: components["schemas"]["ResumeMessage"][];
            /** Artifacts */
            artifacts?: Record<string, never>;
            /** Audit Trail */
            audit_trail?: string[];
            /** Metrics */
            metrics?: {
                [key: string]: number;
            };
            /** Flags */
            flags?: Record<string, never>;
        };
        /** StartWorkflowRequest */
        StartWorkflowRequest: {
            /**
             * Task
             * @default resume_pipeline
             * @enum {string}
             */
            task: "ingest" | "draft" | "revise" | "resume_pipeline" | "compliance_only" | "publish";
            /** Artifacts */
            artifacts?: Record<string, never>;
            /** Flags */
            flags?: Record<string, never>;
            /** Request Id */
            request_id?: string | null;
        };
        /** StartWorkflowResponse */
        StartWorkflowResponse: {
            /** Workflow Id */
            workflow_id: string;
            /** Run Id */
            run_id: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WorkflowResultResponse */
        WorkflowResultResponse: {
            state: components["schemas"]["ResumeWorkflowState"];
        };
        /** WorkflowStateResponse */
        WorkflowStateResponse: {
            state: components["schemas"]["ResumeWorkflowState"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    start_resume_workflow_workflows_resume_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StartWorkflowRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StartWorkflowResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    get_resume_state_workflows__workflow_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowStateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_human_approval_workflows__workflow_id__approval_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApprovalRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_result_workflows__workflow_id__result_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowResultResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
