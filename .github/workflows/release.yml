name: release

on:
  push:
    branches: [ main ]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-gate:
    name: Release quality gate
    runs-on: ubuntu-latest
    env:
      UV_PYTHON_VERSION: '3.13'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.UV_PYTHON_VERSION }}

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            apps/backend/.venv
            ${{ env.HOME }}/.cache/uv
          key: ${{ runner.os }}-uv-${{ env.UV_PYTHON_VERSION }}-${{ hashFiles('apps/backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ env.UV_PYTHON_VERSION }}-

      - name: Backend dependency sync
        working-directory: apps/backend
        run: uv sync --extra dev --frozen

      - name: Backend lint
        working-directory: apps/backend
        run: uv run --extra dev ruff check

      - name: Backend type check
        working-directory: apps/backend
        run: uv run --extra dev mypy app

      - name: Backend tests
        working-directory: apps/backend
        run: uv run pytest

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.1.27'

      - name: Frontend install
        working-directory: apps/frontend
        run: bun install --frozen-lockfile

      - name: Frontend lint
        working-directory: apps/frontend
        run: bun run lint

      - name: Frontend type check
        working-directory: apps/frontend
        run: bun run check

      - name: Frontend tests
        working-directory: apps/frontend
        run: bun run test

      - name: Frontend build
        working-directory: apps/frontend
        run: bun run build

  release:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set image name
        id: names
        run: |
          owner=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          repo=$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')
          echo "APP=ghcr.io/${owner}/${repo}" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Semantic Release
        id: sr
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tag metadata
        if: steps.sr.outputs.new_release_published == 'true'
        id: meta
        run: |
          ver="${{ steps.sr.outputs.new_release_version }}"
          echo "VERSION=${ver}" >> $GITHUB_OUTPUT
          echo "MAJOR=${ver%%.*}" >> $GITHUB_OUTPUT
          echo "MINOR=${ver%.*}" >> $GITHUB_OUTPUT
          echo "SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.sr.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.sr.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push stack image
        if: steps.sr.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.names.outputs.APP }}:latest
            ${{ steps.names.outputs.APP }}:${{ steps.meta.outputs.VERSION }}
            ${{ steps.names.outputs.APP }}:${{ steps.meta.outputs.MINOR }}
            ${{ steps.names.outputs.APP }}:${{ steps.meta.outputs.MAJOR }}
            ${{ steps.names.outputs.APP }}:sha-${{ steps.meta.outputs.SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
